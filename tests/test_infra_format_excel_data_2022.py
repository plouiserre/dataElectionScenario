import unittest
from infrastructure.files.FormatExcelData2022 import FormatExcelData2022

class FromExcelData2022Test(unittest.TestCase):
    def test_separate_gironde_districts_2022_elections(self):
        excel_line = "['33' 'Gironde' 10 '10ème circonscription' 'Complet' 83277 40667 '48.83' 42610 '51.17' 781 '0.94' '1.83' 347 '0.42' '0.81' 41482 '49.81' '97.35' 9 'F' 'HALBIN' 'Hélène' 'DXG' 507 '0.61' '1.22' 'nan' 5 'F' 'PLANTON' 'Veronique, Raymonde' 'RDG' 2034 '2.44' '4.9' 'nan' 3 'M' 'BOURGOIS' 'Pascal' 'NUP' 9705 '11.65' '23.4' 'nan' 6 'F' 'BERNARD' 'Muriel' 'DVG' 0 '0.0' '0.0' 'nan' '8.0' 'F' 'GUILBERT' 'Amélie' 'ECO' '606.0' '0.73' '1.46' 'nan' '10.0' 'F' 'DEJONG-PAUSS' 'Angélique' 'DIV' '262.0' '0.31' '0.63' 'nan' '2.0' 'M' 'BOUDIÉ' 'Florent' 'ENS' '13565.0' '16.29' '32.7' 'nan' '4.0' 'F' 'FLEURY' 'Catherine' 'DSV' '593.0' '0.71' '1.43' 'nan' '7.0' 'M' 'MALHERBE' 'Gonzague' 'REC' '2582.0' '3.1' '6.22' 'nan' '1.0' 'F' 'CHADOURNE' 'Sandrine' 'RN' '11628.0' '13.96' '28.03' 'nan' 'nan' 'nan' 'nan']"

        excel_format = FormatExcelData2022()

        datas = excel_format.format(excel_line)

        self.assertEqual('33', datas[0])
        self.assertEqual('Gironde', datas[1])
        self.assertEqual('10', datas[2])
        self.assertEqual('10ème circonscription', datas[3])
        self.assertEqual('83277', datas[4])
        self.assertEqual('40667', datas[5])
        self.assertEqual('48.83', datas[6])
        self.assertEqual('42610', datas[7])
        self.assertEqual('51.17', datas[8])
        self.assertEqual('781', datas[9])
        self.assertEqual('0.94', datas[10])
        self.assertEqual('1.83', datas[11])
        self.assertEqual('347', datas[12])
        self.assertEqual('0.42', datas[13])
        self.assertEqual('0.81', datas[14])
        self.assertEqual('41482', datas[15])
        self.assertEqual('49.81', datas[16])
        self.assertEqual('97.35', datas[17])
        self.assertEqual('9', datas[18])
        self.assertEqual('DXG', datas[19])
        self.assertEqual('HALBIN', datas[20])
        self.assertEqual('Hélène', datas[21])
        self.assertEqual('FEMININ', datas[22])
        self.assertEqual('507', datas[23])
        self.assertEqual('0.61%', datas[24])
        self.assertEqual('1.22%', datas[25])
        self.assertEqual('5', datas[26])
        self.assertEqual('RDG', datas[27])
        self.assertEqual('PLANTON', datas[28])
        self.assertEqual('Veronique, Raymonde', datas[29])
        self.assertEqual('FEMININ', datas[30])
        self.assertEqual('2034', datas[31])
        self.assertEqual('2.44%', datas[32])
        self.assertEqual('4.9%', datas[33])
        self.assertEqual('3', datas[34])
        self.assertEqual('NUP', datas[35])        
        self.assertEqual('BOURGOIS', datas[36])
        self.assertEqual('Pascal', datas[37])
        self.assertEqual('MASCULIN', datas[38])
        self.assertEqual('9705', datas[39])
        self.assertEqual('11.65%', datas[40])
        self.assertEqual('23.4%', datas[41])
        self.assertEqual('6', datas[42])
        self.assertEqual('DVG', datas[43])        
        self.assertEqual('BERNARD', datas[44])
        self.assertEqual('Muriel', datas[45])
        self.assertEqual('FEMININ', datas[46])
        self.assertEqual('0', datas[47])
        self.assertEqual('0.0%', datas[48])
        self.assertEqual('0.0%', datas[49])
        self.assertEqual('8.0', datas[50])
        self.assertEqual('ECO', datas[51])        
        self.assertEqual('GUILBERT', datas[52])
        self.assertEqual('Amélie', datas[53])
        self.assertEqual('FEMININ', datas[54])
        self.assertEqual('606.0', datas[55])
        self.assertEqual('0.73%', datas[56])
        self.assertEqual('1.46%', datas[57])
        self.assertEqual('10.0', datas[58])
        self.assertEqual('DIV', datas[59])        
        self.assertEqual('DEJONG-PAUSS', datas[60])
        self.assertEqual('Angélique', datas[61])
        self.assertEqual('FEMININ', datas[62])
        self.assertEqual('262.0', datas[63])
        self.assertEqual('0.31%', datas[64])
        self.assertEqual('0.63%', datas[65])
        self.assertEqual('2.0', datas[66])
        self.assertEqual('ENS', datas[67])        
        self.assertEqual('BOUDIÉ', datas[68])
        self.assertEqual('Florent', datas[69])
        self.assertEqual('MASCULIN', datas[70])
        self.assertEqual('13565.0', datas[71])
        self.assertEqual('16.29%', datas[72])
        self.assertEqual('32.7%', datas[73])
        self.assertEqual('4.0', datas[74])
        self.assertEqual('DSV', datas[75])        
        self.assertEqual('FLEURY', datas[76])
        self.assertEqual('Catherine', datas[77])
        self.assertEqual('FEMININ', datas[78])
        self.assertEqual('593.0', datas[79])
        self.assertEqual('0.71%', datas[80])
        self.assertEqual('1.43%', datas[81])
        self.assertEqual('7.0', datas[82])
        self.assertEqual('REC', datas[83])        
        self.assertEqual('MALHERBE', datas[84])
        self.assertEqual('Gonzague', datas[85])
        self.assertEqual('MASCULIN', datas[86])
        self.assertEqual('2582.0', datas[87])
        self.assertEqual('3.1%', datas[88])
        self.assertEqual('6.22%', datas[89])
        self.assertEqual('1.0', datas[90])
        self.assertEqual('RN', datas[91])        
        self.assertEqual('CHADOURNE', datas[92])
        self.assertEqual('Sandrine', datas[93])
        self.assertEqual('FEMININ', datas[94])
        self.assertEqual('11628.0', datas[95])
        self.assertEqual('13.96%', datas[96])
        self.assertEqual('28.03%', datas[97])

       
        
       

